/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.ErrorResponse;
import org.openapitools.model.FiscalEventGetRequest;
import org.openapitools.model.FiscalEventRequest;
import org.openapitools.model.FiscalEventResponse;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-07-07T11:26:28.392249+05:30[Asia/Kolkata]")
@Validated
@Api(value = "fiscal", description = "the fiscal API")
public interface FiscalApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /fiscal/events/v1/_get : Get the list fiscal events.
     * Based on the criteria get the list of events. 
     *
     * @param fiscalEventGetRequest RequestHeader meta data. (required)
     * @return Successful response (status code 200)
     *         or Invalid input. (status code 400)
     */
    @ApiOperation(value = "Get the list fiscal events.", nickname = "fiscalEventsV1GetPost", notes = "Based on the criteria get the list of events. ", response = FiscalEventResponse.class, tags={ "Fiscal Events", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response", response = FiscalEventResponse.class),
        @ApiResponse(code = 400, message = "Invalid input.", response = ErrorResponse.class) })
    @PostMapping(
        value = "/fiscal/events/v1/_get",
        produces = { "*/*" },
        consumes = { "application/json" }
    )
    default ResponseEntity<FiscalEventResponse> fiscalEventsV1GetPost(@ApiParam(value = "RequestHeader meta data." ,required=true )  @Valid @RequestBody FiscalEventGetRequest fiscalEventGetRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"fiscalInfo\" : { \"auditDetails\" : { \"lastModifiedTime\" : 2, \"createdBy\" : \"createdBy\", \"lastModifiedBy\" : \"lastModifiedBy\", \"createdTime\" : 5 }, \"tenantId\" : \"tenantId\", \"attributes\" : \"{}\", \"id\" : \"id\", \"eventType\" : \"revenue_demand\", \"parentEventId\" : \"parentEventId\", \"transactionTime\" : 6, \"referenceId\" : \"referenceId\", \"amountDetails\" : [ { \"amount\" : \"amount\", \"coa\" : \"coa\", \"fromTime\" : 1, \"id\" : \"id\", \"toTime\" : 5 }, { \"amount\" : \"amount\", \"coa\" : \"coa\", \"fromTime\" : 1, \"id\" : \"id\", \"toTime\" : 5 } ] }, \"responseInfo\" : { \"signature\" : \"signature\", \"msgId\" : \"msgId\", \"correlationId\" : \"correlationId\", \"version\" : \"version\", \"ts\" : 0, \"status\" : \"SUCCESS\" } }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /fiscal/events/v1/_push : Create(publish) new fiscal event on iFix
     * Create the new fiscal event
     *
     * @param fiscalEventRequest Details for the new fiscal event + RequestHeader (meta data of the API). (required)
     * @return Event published successfully (status code 202)
     *         or Failed to process the request (status code 400)
     */
    @ApiOperation(value = "Create(publish) new fiscal event on iFix", nickname = "fiscalEventsV1PushPost", notes = "Create the new fiscal event", response = FiscalEventResponse.class, tags={ "Fiscal Events", })
    @ApiResponses(value = { 
        @ApiResponse(code = 202, message = "Event published successfully", response = FiscalEventResponse.class),
        @ApiResponse(code = 400, message = "Failed to process the request", response = ErrorResponse.class) })
    @PostMapping(
        value = "/fiscal/events/v1/_push",
        produces = { "*/*" },
        consumes = { "application/json" }
    )
    default ResponseEntity<FiscalEventResponse> fiscalEventsV1PushPost(@ApiParam(value = "Details for the new fiscal event + RequestHeader (meta data of the API)." ,required=true )  @Valid @RequestBody FiscalEventRequest fiscalEventRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"fiscalInfo\" : { \"auditDetails\" : { \"lastModifiedTime\" : 2, \"createdBy\" : \"createdBy\", \"lastModifiedBy\" : \"lastModifiedBy\", \"createdTime\" : 5 }, \"tenantId\" : \"tenantId\", \"attributes\" : \"{}\", \"id\" : \"id\", \"eventType\" : \"revenue_demand\", \"parentEventId\" : \"parentEventId\", \"transactionTime\" : 6, \"referenceId\" : \"referenceId\", \"amountDetails\" : [ { \"amount\" : \"amount\", \"coa\" : \"coa\", \"fromTime\" : 1, \"id\" : \"id\", \"toTime\" : 5 }, { \"amount\" : \"amount\", \"coa\" : \"coa\", \"fromTime\" : 1, \"id\" : \"id\", \"toTime\" : 5 } ] }, \"responseInfo\" : { \"signature\" : \"signature\", \"msgId\" : \"msgId\", \"correlationId\" : \"correlationId\", \"version\" : \"version\", \"ts\" : 0, \"status\" : \"SUCCESS\" } }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
